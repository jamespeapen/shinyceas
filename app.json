[{"name":"app.R","content":"library(shiny)\nlibrary(ceas)\nlibrary(readxl)\nlibrary(ggplot2)\n\nrep_list <- system.file(\"extdata\", package = \"ceas\") |>\n  list.files(pattern = \"*.xlsx\", full.names = TRUE)\n\nui <- fluidPage(\n  titlePanel(\n    \"High CEAS\",\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Choose Seahorse wave file\", accept = \".xlsx\"),\n      selectInput(\"dataset\", label = \"Example data\", choices = rep_list),\n      numericInput(\"ph\", \"pH\", 7.4, min = 1, max = 14),\n      numericInput(\"pka\", \"pka\", 6.093),\n      numericInput(\"buffer\", \"buffer\", 0.1),\n      selectInput(\"plot\", \"Choose a plot:\",\n        list(\n          `Bioenergetics` = list(\"Bioenergetic Scope\"),\n          `Rate plot` = list(\"OCR\", \"ECAR\"),\n          `ATP` = list(\n            \"Basal glycolysis\",\n            \"Max glycolysis\",\n            \"Basal respiration\",\n            \"Max respiration\")\n        )\n      ),\n    ),\n    mainPanel(\n      plotOutput(\"plot\", width = \"60%\"),\n      downloadButton(\"plot_download\"),\n      dataTableOutput(\"table\")\n    ),\n  ),\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    if (is.null(input$file)) {\n      read_data(input$dataset)\n    } else {\n      read_data(input$file$datapath)\n    }\n  })\n  energetics <- reactive({\n    get_energetics(partition_data(dataset()), input$ph, input$pka, input$buffer)\n  })\n  output$table <- renderDataTable({\n    get_energetics_summary(energetics())\n  })\n  plotter <- reactive({\n    if (input$plot == \"Bioenergetic Scope\") {\n      bioscope_plot(energetics())\n    } else if (input$plot %in% c(\"OCR\", \"ECAR\")) {\n      rate_plot(dataset(), measure = input$plot, assay = ifelse(input$plot == \"OCR\", \"MITO\", \"GLYCO\"))\n    } else {\n      a <- sapply(strsplit(input$plot, \" \"), tolower)\n      atp_plot(energetics(), basal_vs_max = a[1], glyc_vs_resp = substr(a[2], 1, 4))\n    }\n  })\n  output$plot <- renderPlot({\n    plotter() + theme(text = element_text(size = 15))\n  })\n  output$plot_download <- downloadHandler(\n    filename = function() {paste0(\"plot.png\")},\n    content = function(file) ggsave(file, plot = plotter(), device = \"png\", dpi = 300)\n  )\n}\nshinyApp(ui, server)\n","type":"text"}]
